/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
import java.io.*;
import java.awt.event.*;
import java.awt.*;
import javax.swing.*;
import java.lang.reflect.Method;
/**
 *
 * @author subhra
 */
public class mainwindow extends javax.swing.JFrame {

    /**
     * Creates new form mainwindow
     */
    public mainwindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
		public static void openURL(String url)
	{
		String osName = System.getProperty("os.name");
		try 
		{
			if (osName.startsWith("Windows"))
	
				Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + url);
			else 
			{ 
				String[] browsers = {"firefox", "opera", "konqueror", "epiphany", "mozilla", "netscape" };
				String browser = null;
				for (int count = 0; count < browsers.length && browser == null; count++)
				if (Runtime.getRuntime().exec(new String[] {"which", browsers[count]}).waitFor() == 0)
				browser = browsers[count];
				Runtime.getRuntime().exec(new String[] {browser, url});
			}
		}
		catch (Exception e) 
		{
			JOptionPane.showMessageDialog(null, "Error in opening browser" + ":\n" + e.getLocalizedMessage());
		}
	}
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() 
	{
		
			String usr_nm = "root";
			String str_nm;		        
			try{
			BufferedReader bru=new BufferedReader(new FileReader("/etc/Network_Builder_V0.1/user.usr"));
			str_nm = bru.readLine();
			    if(!str_nm.equals(usr_nm))
				{
                                  JLabel errorFields = new JLabel("<HTML><FONT COLOR = RED>Root User LOGIN Must Required.</FONT></HTML>");	
				  JOptionPane.showMessageDialog(null,errorFields); 
                                }
			    else{
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        jButton22 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jButton24 = new javax.swing.JButton();
        jButton25 = new javax.swing.JButton();
        jButton26 = new javax.swing.JButton();
        jButton27 = new javax.swing.JButton();
        jButton28 = new javax.swing.JButton();
        jButton29 = new javax.swing.JButton();
        jButton30 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        jButton32 = new javax.swing.JButton();
        jButton33 = new javax.swing.JButton();
        jButton34 = new javax.swing.JButton();
        jButton35 = new javax.swing.JButton();
        jButton36 = new javax.swing.JButton();
        jButton37 = new javax.swing.JButton();
        jButton38 = new javax.swing.JButton();
        jButton39 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Network Builder V0.1| Home");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(javax.swing.UIManager.getDefaults().getColor("CheckBoxMenuItem.selectionBackground"));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Century Schoolbook L", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(53, 106, 211));
        jLabel1.setText("Â©Network Builder V0.1");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel3.setFont(new java.awt.Font("Century Schoolbook L", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(41, 66, 214));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("NETWORK BUILDER V0.1");

        jButton1.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton1.setForeground(java.awt.Color.darkGray);
        jButton1.setText("Automatic DHCP");
        jButton1.setToolTipText("Automatic IP");
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
		public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
	        final String dir = System.getProperty("user.dir");
		try{
		String unixCommand = "java Decrypter dhcp.sh.des "+dir; 
		runShellScript(unixCommand);
		unixCommand = "rm -f dhcp.sh.des"; 
		runShellScript(unixCommand);
		}
		catch(Exception e){}
		new dhcpframe().setVisible(true);
            }
        });

        jButton2.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton2.setText("Setup Name Server");
        jButton2.setToolTipText("Network DNS ");
        jButton2.setPreferredSize(new java.awt.Dimension(169, 33));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
		public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
		final String dir = System.getProperty("user.dir");
		try{
		String unixCommand = "java Decrypter dns.sh.des "+dir; 
		runShellScript(unixCommand);
		unixCommand = "rm -f dns.sh.des"; 
		runShellScript(unixCommand);
		}
		catch(Exception e){}
		new dnssetup().setVisible(true);
            }
        });

        jButton3.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton3.setText("Setup Apache Web Server");
        jButton3.setToolTipText("http://ip:80");
        jButton3.setPreferredSize(new java.awt.Dimension(169, 33));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
		public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
		final String dir = System.getProperty("user.dir");
		try{
		String unixCommand = "java Decrypter http.sh.des "+dir; 
		runShellScript(unixCommand);
		unixCommand = "rm -f http.sh.des"; 
		runShellScript(unixCommand);
		}
		catch(Exception e){}
		new httpsetupframe().setVisible(true);
            }
        });

        jButton4.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton4.setText("Setup File Server");
        jButton4.setToolTipText("ftp://ip:21");
        jButton4.setPreferredSize(new java.awt.Dimension(169, 33));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
		public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
		final String dir = System.getProperty("user.dir");
		try{
		String unixCommand = "java Decrypter ftp.sh.des "+dir; 
		runShellScript(unixCommand);
		unixCommand = "rm -f ftp.sh.des"; 
		runShellScript(unixCommand);
		}
		catch(Exception e){}
		new ftpframe().setVisible(true);
            }
        });

        jButton5.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton5.setText("Setup NFS Directory");
        jButton5.setToolTipText("System Admin Directory Share");
        jButton5.setPreferredSize(new java.awt.Dimension(169, 33));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
		public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
		final String dir = System.getProperty("user.dir");
		try{
		String unixCommand = "java Decrypter nfs-server.sh.des "+dir; 
		runShellScript(unixCommand);
		unixCommand = "rm -f nfs-server.sh.des"; 
		runShellScript(unixCommand);
		}
		catch(Exception e){}
		new nfsserver().setVisible(true);
            }
        });

        jButton6.setBackground(java.awt.Color.lightGray);
        jButton6.setFont(new java.awt.Font("Century Schoolbook L", 1, 18)); // NOI18N
        jButton6.setForeground(new java.awt.Color(166, 51, 54));
        jButton6.setToolTipText("SYSTEM EXIT");
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setLabel("Quit");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
		System.exit(0);
            }
        });

        jButton7.setFont(new java.awt.Font("Century Schoolbook L", 0, 14)); // NOI18N
        jButton7.setForeground(java.awt.SystemColor.activeCaption);
        jButton7.setText("SEE MANUAL");
        jButton7.setToolTipText("Automatic DHCP Manual");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
		openURL("file:///etc/Network_Builder_V0.1/logs/NBV0.1_MANUALS/Network_Builder_V0.1_DHCP_MANUAL.html"); 
            }
        });

        jButton8.setFont(new java.awt.Font("Century Schoolbook L", 0, 14)); // NOI18N
        jButton8.setForeground(java.awt.SystemColor.activeCaption);
        jButton8.setText("SEE MANUAL");
        jButton8.setToolTipText("Setup Name Server Manual");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
		openURL("file:///etc/Network_Builder_V0.1/logs/NBV0.1_MANUALS/Network_Builder_V0.1_DNS_MANUAL.html"); 
            }
        });

        jButton9.setFont(new java.awt.Font("Century Schoolbook L", 0, 14)); // NOI18N
        jButton9.setForeground(java.awt.SystemColor.activeCaption);
        jButton9.setText("SEE MANUAL");
        jButton9.setToolTipText("Apache Web Server Manual");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
		openURL("file:///etc/Network_Builder_V0.1/logs/NBV0.1_MANUALS/Network_Builder_V0.1_WEB_SERVER_MANUAL.html"); 
            }
        });

        jButton10.setFont(new java.awt.Font("Century Schoolbook L", 0, 14)); // NOI18N
        jButton10.setForeground(java.awt.SystemColor.activeCaption);
        jButton10.setText("SEE MANUAL");
        jButton10.setToolTipText("FTP Manual");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
		openURL("file:///etc/Network_Builder_V0.1/logs/NBV0.1_MANUALS/Network_Builder_V0.1_FTP_SERVER_MANUAL.html"); 
            }
        });

        jButton11.setFont(new java.awt.Font("Century Schoolbook L", 0, 14)); // NOI18N
        jButton11.setForeground(java.awt.SystemColor.activeCaption);
        jButton11.setText("SEE MANUAL");
        jButton11.setToolTipText("NFS Manual");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
		openURL("file:///etc/Network_Builder_V0.1/logs/NBV0.1_MANUALS/Network_Builder_V0.1_NFS_SERVER_MANUAL.html"); 
            }
        });

        jButton12.setBackground(new java.awt.Color(64, 224, 105));
        jButton12.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton12.setText("START");
        jButton12.setToolTipText("Start DHCP");
        jButton12.addActionListener(new java.awt.event.ActionListener()
	{
	    public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt)
		{
	                jButton12ActionPerformed(evt);
			try{
				JLabel optionLabel = new JLabel("<HTML><FONT COLOR = GREEN>Want to START or RESTART SERVICE!. <BR> Sure?</FONT></HTML>");
				int confirm =JOptionPane.showConfirmDialog(null,optionLabel);
			switch(confirm)
				{
	   				case JOptionPane.YES_OPTION:  
	   				String unixCommand = "ifup dhcp>/dev/null"; 
				 	runShellScript(unixCommand);
					unixCommand = "service dhcpd restart>/dev/null"; 
				 	runShellScript(unixCommand);
            				 
	   				break;
					case JOptionPane.CANCEL_OPTION:   // No Case.(Go back. Set text to 0)
	   				
            				break;
	   			}
			   } 
			catch(Exception e){}
	        }
        });

        jButton13.setBackground(new java.awt.Color(211, 47, 31));
        jButton13.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton13.setText("STOP");
        jButton13.setToolTipText("Stop DHCP");
        jButton13.addActionListener(new java.awt.event.ActionListener()
	{
	    public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt)
		{
	                jButton13ActionPerformed(evt);
			try{
				JLabel optionLabel = new JLabel("<HTML><FONT COLOR = GREEN>Want to STOP SERVICE!. <BR> Sure?</FONT></HTML>");
				int confirm =JOptionPane.showConfirmDialog(null,optionLabel);
			switch(confirm)
				{
	   				case JOptionPane.YES_OPTION:  
	   				String unixCommand = "service dhcpd stop>/dev/null"; 
				 	runShellScript(unixCommand);
            				 
	   				break;
					case JOptionPane.CANCEL_OPTION:   // No Case.(Go back. Set text to 0)
	   				
            				break;
	   			}
			   } 
			catch(Exception e){}
	        }
        });

        jButton14.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton14.setForeground(new java.awt.Color(53, 45, 168));
        jButton14.setText("UPDATE");
        jButton14.setToolTipText("Update DHCP");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
		public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
		final String dir = System.getProperty("user.dir");
		try{
		String unixCommand = "java Decrypter dhcp.sh.des "+dir; 
		runShellScript(unixCommand);
		unixCommand = "rm -f dhcp.sh.des"; 
		runShellScript(unixCommand);
		}
		catch(Exception e){}
		new dhcpupdateframe().setVisible(true);
            }
        });

        jButton15.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton15.setForeground(java.awt.SystemColor.desktop);
        jButton15.setText("GET STATUS");
        jButton15.setToolTipText("DHCP Status");
        jButton15.addActionListener(new java.awt.event.ActionListener()
	{
	    public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt)
	    {
                jButton15ActionPerformed(evt);
		final String dir = System.getProperty("user.dir");
		try{
		String unixCommand = "java Decrypter dhcps.sh.des "+dir; 
		runShellScript(unixCommand);
		unixCommand = "bash dhcps.sh"; 
		runShellScript(unixCommand);
		unixCommand = "rm -f dhcps.sh.des"; 
		runShellScript(unixCommand);
		new dhcpstatus().setVisible(true);
		}
		catch(Exception e){}
            }
        });

        jButton16.setBackground(new java.awt.Color(64, 224, 105));
        jButton16.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton16.setText("START");
        jButton16.setToolTipText("Start DNS");
        jButton16.addActionListener(new java.awt.event.ActionListener()
	{
	    public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt)
		{
	                jButton16ActionPerformed(evt);
			try{
				JLabel optionLabel = new JLabel("<HTML><FONT COLOR = GREEN>Want to START or RESTART SERVICE!. <BR> Sure?</FONT></HTML>");
				int confirm =JOptionPane.showConfirmDialog(null,optionLabel);
			switch(confirm)
				{
	   				case JOptionPane.YES_OPTION:  
	   				String unixCommand = "service named restart>/dev/null"; 
				 	runShellScript(unixCommand);
            				 
	   				break;
					case JOptionPane.CANCEL_OPTION:   // No Case.(Go back. Set text to 0)
	   				
            				break;
	   			}
			   } 
			catch(Exception e){}
	        }
        });


        jButton17.setBackground(new java.awt.Color(211, 47, 31));
        jButton17.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton17.setText("STOP");
        jButton17.setToolTipText("Stop DNS");
        jButton17.addActionListener(new java.awt.event.ActionListener()
	{
	    public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt)
		{
	                jButton17ActionPerformed(evt);
			try{
				JLabel optionLabel = new JLabel("<HTML><FONT COLOR = GREEN>Want to STOP SERVICE!. <BR> Sure?</FONT></HTML>");
				int confirm =JOptionPane.showConfirmDialog(null,optionLabel);
			switch(confirm)
				{
	   				case JOptionPane.YES_OPTION:  
	   				String unixCommand = "service named stop>/dev/null"; 
				 	runShellScript(unixCommand);
            				 
	   				break;
					case JOptionPane.CANCEL_OPTION:   // No Case.(Go back. Set text to 0)
	   				
            				break;
	   			}
			   } 
			catch(Exception e){}
	        }
        });

        jButton18.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton18.setForeground(new java.awt.Color(53, 45, 168));
        jButton18.setText("UPDATE");
        jButton18.setToolTipText("Update DNS");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
		public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
		final String dir = System.getProperty("user.dir");
		try{
		String unixCommand = "java Decrypter dns.sh.des "+dir; 
		runShellScript(unixCommand);
		unixCommand = "rm -f dns.sh.des"; 
		runShellScript(unixCommand);
		}
		catch(Exception e){}
		new dnsupdate().setVisible(true);
            }
        });

        jButton19.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton19.setForeground(java.awt.SystemColor.desktop);
        jButton19.setText("GET STATUS");
        jButton19.setToolTipText("DNS Status");
        jButton19.addActionListener(new java.awt.event.ActionListener()
	{
	    public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt)
	    {
                jButton19ActionPerformed(evt);
		final String dir = System.getProperty("user.dir");
		try{
		String unixCommand = "java Decrypter dnss.sh.des "+dir; 
		runShellScript(unixCommand);
		unixCommand = "bash dnss.sh"; 
		runShellScript(unixCommand);
		unixCommand = "rm -f dnss.sh.des"; 
		runShellScript(unixCommand);
		new dnsstatus().setVisible(true);
		}
		catch(Exception e){}
            }
        });


        jButton20.setBackground(new java.awt.Color(64, 224, 105));
        jButton20.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton20.setText("START");
        jButton20.setToolTipText("Start http Server");
        jButton20.addActionListener(new java.awt.event.ActionListener()
	{
	    public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt)
		{
	                jButton20ActionPerformed(evt);
			try{
				JLabel optionLabel = new JLabel("<HTML><FONT COLOR = GREEN>Want to START or RESTART SERVICE!. <BR> Sure?</FONT></HTML>");
				int confirm =JOptionPane.showConfirmDialog(null,optionLabel);
			switch(confirm)
				{
	   				case JOptionPane.YES_OPTION:  
	   				String unixCommand = "service httpd restart>/dev/null"; 
				 	runShellScript(unixCommand);
            				 
	   				break;
					case JOptionPane.CANCEL_OPTION:   // No Case.(Go back. Set text to 0)
	   				
            				break;
	   			}
			   } 
			catch(Exception e){}
	        }
        });

        jButton21.setBackground(new java.awt.Color(211, 47, 31));
        jButton21.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton21.setText("STOP");
        jButton21.setToolTipText("Stop http Server");
        jButton21.addActionListener(new java.awt.event.ActionListener()
	{
	    public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt)
		{
	                jButton21ActionPerformed(evt);
			try{
				JLabel optionLabel = new JLabel("<HTML><FONT COLOR = GREEN>Want to STOP SERVICE!. <BR> Sure?</FONT></HTML>");
				int confirm =JOptionPane.showConfirmDialog(null,optionLabel);
			switch(confirm)
				{
	   				case JOptionPane.YES_OPTION:  
	   				String unixCommand = "service httpd stop>/dev/null"; 
				 	runShellScript(unixCommand);
            				 
	   				break;
					case JOptionPane.CANCEL_OPTION:   // No Case.(Go back. Set text to 0)
	   				
            				break;
	   			}
			   } 
			catch(Exception e){}
	        }
        });


        jButton22.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton22.setForeground(new java.awt.Color(53, 45, 168));
        jButton22.setText("UPDATE");
        jButton22.setToolTipText("Update http Server");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
		public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
		final String dir = System.getProperty("user.dir");
		try{
		String unixCommand = "java Decrypter http.sh.des "+dir; 
		runShellScript(unixCommand);
		unixCommand = "rm -f http.sh.des"; 
		runShellScript(unixCommand);
		}
		catch(Exception e){}
		new httpupdateframe().setVisible(true);
            }
        });

        jButton23.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton23.setForeground(java.awt.SystemColor.desktop);
        jButton23.setText("GET STATUS");
        jButton23.setToolTipText("http Service Status");
        jButton23.addActionListener(new java.awt.event.ActionListener()
	{
	    public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt)
	    {
                jButton23ActionPerformed(evt);
		final String dir = System.getProperty("user.dir");
		try{
		String unixCommand = "java Decrypter https.sh.des "+dir; 
		runShellScript(unixCommand);
		unixCommand = "bash https.sh"; 
		runShellScript(unixCommand);
		unixCommand = "rm -f https.sh.des"; 
		runShellScript(unixCommand);
		new httpstatus().setVisible(true);
		}
		catch(Exception e){}
            }
        });


        jButton24.setBackground(new java.awt.Color(64, 224, 105));
        jButton24.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton24.setText("START");
        jButton24.setToolTipText("Start ftp");
        jButton24.addActionListener(new java.awt.event.ActionListener()
	{
	    public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt)
		{
	                jButton24ActionPerformed(evt);
			try{
				JLabel optionLabel = new JLabel("<HTML><FONT COLOR = GREEN>Want to START or RESTART SERVICE!. <BR> Sure?</FONT></HTML>");
				int confirm =JOptionPane.showConfirmDialog(null,optionLabel);
			switch(confirm)
				{
	   				case JOptionPane.YES_OPTION:  
	   				String unixCommand = "service vsftpd restart>/dev/null"; 
				 	runShellScript(unixCommand);
            				 
	   				break;
					case JOptionPane.CANCEL_OPTION:   // No Case.(Go back. Set text to 0)
	   				
            				break;
	   			}
			   } 
			catch(Exception e){}
	        }
        });


        jButton25.setBackground(new java.awt.Color(211, 47, 31));
        jButton25.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton25.setText("STOP");
        jButton25.setToolTipText("Stop ftp");
        jButton25.addActionListener(new java.awt.event.ActionListener()
	{
	    public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt)
		{
	                jButton25ActionPerformed(evt);
			try{
				JLabel optionLabel = new JLabel("<HTML><FONT COLOR = GREEN>Want to STOP SERVICE!. <BR> Sure?</FONT></HTML>");
				int confirm =JOptionPane.showConfirmDialog(null,optionLabel);
			switch(confirm)
				{
	   				case JOptionPane.YES_OPTION:  
	   				String unixCommand = "service vsftpd stop>/dev/null"; 
				 	runShellScript(unixCommand);
            				 
	   				break;
					case JOptionPane.CANCEL_OPTION:   // No Case.(Go back. Set text to 0)
	   				
            				break;
	   			}
			   } 
			catch(Exception e){}
	        }
        });


        jButton26.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton26.setForeground(new java.awt.Color(53, 45, 168));
        jButton26.setText("UPDATE");
        jButton26.setToolTipText("Update ftp");
        jButton26.addActionListener(new java.awt.event.ActionListener() {
		public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
		final String dir = System.getProperty("user.dir");
		try{
		String unixCommand = "java Decrypter ftp.sh.des "+dir; 
		runShellScript(unixCommand);
		unixCommand = "rm -f ftp.sh.des"; 
		runShellScript(unixCommand);
		}
		catch(Exception e){}
		new ftpupdateframe().setVisible(true);
            }
        });

        jButton27.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton27.setForeground(java.awt.SystemColor.desktop);
        jButton27.setText("GET STATUS");
        jButton27.setToolTipText("ftp Status");
        jButton27.addActionListener(new java.awt.event.ActionListener()
	{
	    public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt)
	    {
                jButton27ActionPerformed(evt);
		final String dir = System.getProperty("user.dir");
		try{
		String unixCommand = "java Decrypter ftps.sh.des "+dir; 
		runShellScript(unixCommand);
		unixCommand = "bash ftps.sh"; 
		runShellScript(unixCommand);
		unixCommand = "rm -f ftps.sh.des"; 
		runShellScript(unixCommand);
		new ftpstatus().setVisible(true);
		}
		catch(Exception e){}
            }
        });


        jButton28.setBackground(new java.awt.Color(64, 224, 105));
        jButton28.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton28.setText("START");
        jButton28.setToolTipText("Start NFS");
        jButton28.addActionListener(new java.awt.event.ActionListener()
	{
	    public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt)
		{
	                jButton28ActionPerformed(evt);
			try{
				JLabel optionLabel = new JLabel("<HTML><FONT COLOR = GREEN>Want to START or RESTART SERVICE!. <BR> Sure?</FONT></HTML>");
				int confirm =JOptionPane.showConfirmDialog(null,optionLabel);
			switch(confirm)
				{
	   				case JOptionPane.YES_OPTION:  
					final String dir = System.getProperty("user.dir");
	   				String unixCommand = "service nfs restart>/dev/null"; 
				 	runShellScript(unixCommand);
					unixCommand = "service nfslock restart>/dev/null"; 
				 	runShellScript(unixCommand);
					unixCommand = "service rpcbind restart>/dev/null"; 
				 	runShellScript(unixCommand);
            				 
	   				break;
					case JOptionPane.CANCEL_OPTION:   // No Case.(Go back. Set text to 0)
	   				
            				break;
	   			}
			   } 
			catch(Exception e){}
	        }
        });


        jButton29.setBackground(new java.awt.Color(211, 47, 31));
        jButton29.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton29.setText("STOP");
        jButton29.setToolTipText("Stop NFS");
        jButton29.addActionListener(new java.awt.event.ActionListener()
	{
	    public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt)
		{
	                jButton29ActionPerformed(evt);
			try{
				JLabel optionLabel = new JLabel("<HTML><FONT COLOR = GREEN>Want to STOP SERVICE!. <BR> Sure?</FONT></HTML>");
				int confirm =JOptionPane.showConfirmDialog(null,optionLabel);
			switch(confirm)
				{
	   				case JOptionPane.YES_OPTION:  
	   				String unixCommand = "service nfs stop>/dev/null"; 
				 	runShellScript(unixCommand);
					unixCommand = "service nfslock stop>/dev/null"; 
				 	runShellScript(unixCommand);
					unixCommand = "service rpcbind stop>/dev/null"; 
				 	runShellScript(unixCommand);
            				 
	   				break;
					case JOptionPane.CANCEL_OPTION:   // No Case.(Go back. Set text to 0)
	   				
            				break;
	   			}
			   } 
			catch(Exception e){}
	        }
        });


        jButton30.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton30.setForeground(new java.awt.Color(53, 45, 168));
        jButton30.setText("UPDATE");
        jButton30.setToolTipText("Update NFS");
        jButton30.addActionListener(new java.awt.event.ActionListener() {
		public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton30ActionPerformed(evt);
		final String dir = System.getProperty("user.dir");
		try{
		String unixCommand = "java Decrypter nfs-server.sh.des "+dir; 
		runShellScript(unixCommand);
		unixCommand = "rm -f nfs-server.sh.des"; 
		runShellScript(unixCommand);
		}
		catch(Exception e){}
		new nfsupdate().setVisible(true);
		
            }
        });

        jButton31.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton31.setForeground(java.awt.SystemColor.desktop);
        jButton31.setText("GET STATUS");
        jButton31.setToolTipText("NFS Status");
        jButton31.addActionListener(new java.awt.event.ActionListener()
	{
	    public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt)
	    {
                jButton31ActionPerformed(evt);
		final String dir = System.getProperty("user.dir");
		try{
		String unixCommand = "java Decrypter nfss.sh.des "+dir; 
		runShellScript(unixCommand);
		unixCommand = "bash nfss.sh"; 
		runShellScript(unixCommand);
		unixCommand = "rm -f nfss.sh.des"; 
		runShellScript(unixCommand);
		new nfsstatus().setVisible(true);
		}
		catch(Exception e){}
            }
        });


        jButton32.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton32.setText("NAT Setup");
        jButton32.setToolTipText("Nat setup");
        jButton32.addActionListener(new java.awt.event.ActionListener() {
		public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton32ActionPerformed(evt);
		final String dir = System.getProperty("user.dir");
		try{
		String unixCommand = "java Decrypter nat.sh.des "+dir; 
		runShellScript(unixCommand);
		unixCommand = "rm -f nat.sh.des"; 
		runShellScript(unixCommand);
		}
		catch(Exception e){}
		new natframe().setVisible(true);
            }
        });

        jButton33.setFont(new java.awt.Font("Century Schoolbook L", 0, 14)); // NOI18N
        jButton33.setForeground(java.awt.SystemColor.activeCaption);
        jButton33.setText("SEE MANUAL");
        jButton33.setToolTipText("NAT Manual");
        jButton33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton33ActionPerformed(evt);
		openURL("file:///etc/Network_Builder_V0.1/logs/NBV0.1_MANUALS/Network_Builder_V0.1_NAT_MANUAL.html"); 
            }
        });

        jButton34.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton34.setForeground(java.awt.SystemColor.desktop);
        jButton34.setText("GET STATUS");
        jButton34.setToolTipText("NAT STATUS");
        jButton34.addActionListener(new java.awt.event.ActionListener()
	{
	    public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt)
	    {
                jButton34ActionPerformed(evt);
		try{
		/*String unixCommand = "bash nats.sh"; 
		runShellScript(unixCommand);*/
		new natstatus().setVisible(true);
		}
		catch(Exception e){}
            }
        });

        jButton35.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton35.setForeground(new java.awt.Color(53, 45, 168));
        jButton35.setText("UPDATE");
        jButton35.setToolTipText("NAT Update");
        jButton35.addActionListener(new java.awt.event.ActionListener() {
		public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton35ActionPerformed(evt);
		final String dir = System.getProperty("user.dir");
		try{
		String unixCommand = "java Decrypter nat.sh.des "+dir; 
		runShellScript(unixCommand);
		unixCommand = "rm -f nat.sh.des"; 
		runShellScript(unixCommand);
		}
		catch(Exception e){}
		new natupdateframe().setVisible(true);
            }
        });

        jButton36.setBackground(new java.awt.Color(211, 47, 31));
        jButton36.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton36.setText("STOP");
        jButton36.setToolTipText("NAT STOP");
        jButton36.addActionListener(new java.awt.event.ActionListener()
	{
	    public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt)
		{
	                jButton36ActionPerformed(evt);
			try{
				JLabel optionLabel = new JLabel("<HTML><FONT COLOR = GREEN>Want to STOP SERVICE!. <BR> Sure?</FONT></HTML>");
				int confirm =JOptionPane.showConfirmDialog(null,optionLabel);
			switch(confirm)
				{
	   				case JOptionPane.YES_OPTION:  
	   				String unixCommand = " "; 
				 	runShellScript(unixCommand);
            				 
	   				break;
					case JOptionPane.CANCEL_OPTION:   // No Case.(Go back. Set text to 0)
	   				
            				break;
	   			}
			   } 
			catch(Exception e){}
	        }
        });


        jButton37.setBackground(new java.awt.Color(64, 224, 105));
        jButton37.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton37.setText("START");
        jButton37.setToolTipText("NAT START");
        jButton37.addActionListener(new java.awt.event.ActionListener()
	{
	    public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt)
		{
	                jButton37ActionPerformed(evt);
			try{
				JLabel optionLabel = new JLabel("<HTML><FONT COLOR = GREEN>Want to START or RESTART SERVICE!. <BR> Sure?</FONT></HTML>");
				int confirm =JOptionPane.showConfirmDialog(null,optionLabel);
			switch(confirm)
				{
	   				case JOptionPane.YES_OPTION:  
	   				String unixCommand = " "; 
				 	runShellScript(unixCommand);
            				 
	   				break;
					case JOptionPane.CANCEL_OPTION:   // No Case.(Go back. Set text to 0)
	   				
            				break;
	   			}
			   } 
			catch(Exception e){}
	        }
        });

        jButton38.setBackground(new java.awt.Color(211, 47, 31));
        jButton38.setFont(new java.awt.Font("Century Schoolbook L", 1, 14)); // NOI18N
        jButton38.setText("STOP ALL RUNNING SERVICE");
        jButton38.setToolTipText("ALL SERVICE STOP");
        jButton38.addActionListener(new java.awt.event.ActionListener()
	{
	    public void runShellScript(String unixCommand) throws IOException, InterruptedException
			 {
			        ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
			        processBuilder.redirectErrorStream(true); 
			        Process shellProcess = processBuilder.start();
			        InputStream inputStream = shellProcess.getInputStream(); 
			        int consoleDisplay;
			        while((consoleDisplay=inputStream.read())!=-1)
				 {
			            System.out.println(consoleDisplay);
				}
        			try
				 {
				            inputStream.close();
        			 } 
				catch (IOException iOException)
				 { }
			}
            public void actionPerformed(java.awt.event.ActionEvent evt)
		{
	                jButton38ActionPerformed(evt);
			try{
				JLabel optionLabel = new JLabel("<HTML><FONT COLOR = GREEN>Want to STOP ALL RUNNING SERVICE!. <BR> Sure?</FONT></HTML>");
				int confirm =JOptionPane.showConfirmDialog(null,optionLabel);
			switch(confirm)
				{
	   				case JOptionPane.YES_OPTION:  
	   				String unixCommand = "service dhcpd stop>/dev/null"; 
				 	runShellScript(unixCommand);
					unixCommand = "service named stop>/dev/null"; 
				 	runShellScript(unixCommand);
					unixCommand = "service httpd stop>/dev/null"; 
				 	runShellScript(unixCommand);
					unixCommand = "service vsftpd stop>/dev/null"; 
				 	runShellScript(unixCommand);
					unixCommand = "service nfs stop>/dev/null"; 
				 	runShellScript(unixCommand);
					unixCommand = "service nfslock stop>/dev/null"; 
				 	runShellScript(unixCommand);
					unixCommand = "service rpcbind stop>/dev/null"; 
				 	runShellScript(unixCommand);
            				 
	   				break;
					case JOptionPane.CANCEL_OPTION:   // No Case.(Go back. Set text to 0)
	   				
            				break;
	   			}
			   } 
			catch(Exception e){}
	        }
        });

        jButton39.setBackground(java.awt.SystemColor.desktop);
        jButton39.setFont(new java.awt.Font("Century Schoolbook L", 1, 10)); // NOI18N
        jButton39.setForeground(java.awt.Color.white);
        jButton39.setText("About It");
        jButton39.setToolTipText("About NB v0.1");
        jButton39.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton39ActionPerformed(evt);
		new aboutframe().setVisible(true);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(258, 258, 258))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton39)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton38)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton15))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton19))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton21)
                                .addGap(12, 12, 12)
                                .addComponent(jButton22)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton23))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton24)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton25))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton32, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton37, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton28)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton29)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton26)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton27))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jButton30)
                                            .addComponent(jButton35))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jButton31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                        .addContainerGap(28, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton12)
                            .addComponent(jButton13)
                            .addComponent(jButton14)
                            .addComponent(jButton15)
                            .addComponent(jButton7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton8)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton16)
                            .addComponent(jButton18)
                            .addComponent(jButton19)
                            .addComponent(jButton17))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton9)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton20)
                                .addComponent(jButton21)
                                .addComponent(jButton22)
                                .addComponent(jButton23)))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton10)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton11)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton30)
                                .addComponent(jButton31)
                                .addComponent(jButton29)
                                .addComponent(jButton28)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton33)
                            .addComponent(jButton32, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton37)
                            .addComponent(jButton36)
                            .addComponent(jButton35)
                            .addComponent(jButton34))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton24)
                            .addComponent(jButton25)
                            .addComponent(jButton26)
                            .addComponent(jButton27))
                        .addGap(180, 180, 180)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton38))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jButton39))))
        );

        pack();
	setLocationRelativeTo(null);
      }
    }
    catch(Exception ee){}
    
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton24ActionPerformed

    private void jButton28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton28ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton28ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton21ActionPerformed

    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton25ActionPerformed

    private void jButton29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton29ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton29ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton22ActionPerformed

    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton26ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton26ActionPerformed

    private void jButton30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton30ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton30ActionPerformed

    private void jButton32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton32ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton32ActionPerformed

    private void jButton33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton33ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton33ActionPerformed

    private void jButton37ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton37ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton37ActionPerformed

    private void jButton36ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton36ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton36ActionPerformed

    private void jButton35ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton35ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton35ActionPerformed

    private void jButton34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton34ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton34ActionPerformed

    private void jButton38ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton38ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton38ActionPerformed

    private void jButton39ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton39ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton39ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton23ActionPerformed

    private void jButton27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton27ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton27ActionPerformed

    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton31ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainwindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainwindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainwindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainwindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainwindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton32;
    private javax.swing.JButton jButton33;
    private javax.swing.JButton jButton34;
    private javax.swing.JButton jButton35;
    private javax.swing.JButton jButton36;
    private javax.swing.JButton jButton37;
    private javax.swing.JButton jButton38;
    private javax.swing.JButton jButton39;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
